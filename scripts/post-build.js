#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß Running post-build script...');

// VerificƒÉ dacƒÉ directorul .next existƒÉ
const nextDir = path.join(process.cwd(), '.next');
if (!fs.existsSync(nextDir)) {
  console.error('‚ùå Directorul .next nu existƒÉ! Rula»õi npm run build mai √Ænt√¢i.');
  process.exit(1);
}

// VerificƒÉ structura build-ului
const staticDir = path.join(nextDir, 'static');
if (!fs.existsSync(staticDir)) {
  console.error('‚ùå Directorul .next/static nu existƒÉ! Build-ul pare incomplet.');
  process.exit(1);
}

// ListeazƒÉ fi»ôierele statice pentru verificare
const chunks = fs.readdirSync(path.join(staticDir, 'chunks')).length;
console.log(`‚úÖ Build verificat: ${chunks} chunk-uri gƒÉsite √Æn .next/static/chunks`);

// VerificƒÉ dacƒÉ existƒÉ pagina soferi »ôi vehicule √Æn build
const pagesDir = path.join(nextDir, 'server', 'pages');
if (fs.existsSync(pagesDir)) {
  const pages = fs.readdirSync(pagesDir);
  const hasSoferi = pages.some(p => p.includes('soferi'));
  const hasVehicule = pages.some(p => p.includes('vehicule'));
  
  if (!hasSoferi || !hasVehicule) {
    console.warn('‚ö†Ô∏è Paginile soferi sau vehicule lipsesc din build!');
  } else {
    console.log('‚úÖ Paginile soferi »ôi vehicule sunt incluse √Æn build');
  }
}

console.log('‚úÖ Post-build script completat cu succes!');